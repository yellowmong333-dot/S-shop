
const express=require('express');const fs=require('fs');const path=require('path');const cors=require('cors');const multer=require('multer');const session=require('express-session');const {v2:cloudinary}=require('cloudinary');const {CloudinaryStorage}=require('multer-storage-cloudinary');
cloudinary.config({cloud_name:process.env.CLOUD_NAME,api_key:process.env.CLOUD_API_KEY,api_secret:process.env.CLOUD_API_SECRET});
const app=express();const PORT=process.env.PORT||3000;const ADMIN_PASS=process.env.ADMIN_PASS||'admin123';const SESSION_SECRET=process.env.SESSION_SECRET||'sfoodgo_'+Math.random().toString(36).slice(2);
app.set('trust proxy',1);app.use(cors());app.use(express.json());app.use(express.urlencoded({extended:true}));
app.use(session({name:'sf_sid',secret:SESSION_SECRET,resave:false,saveUninitialized:false,cookie:{httpOnly:true,sameSite:'lax',secure:process.env.NODE_ENV==='production',maxAge:1000*60*60*24*7}}));
app.use('/',express.static(path.join(__dirname,'public')));app.get('/health',(req,res)=>res.status(200).send('OK'));
const DATA_FILE=path.join(__dirname,'data.json');function readData(){try{return JSON.parse(fs.readFileSync(DATA_FILE,'utf8'));}catch(e){return{items:[]}}}function writeData(d){fs.writeFileSync(DATA_FILE,JSON.stringify(d,null,2))}if(!fs.existsSync(DATA_FILE))writeData({items:[]});
const storage=new CloudinaryStorage({cloudinary,params:async(req,file)=>({folder:'sfoodgo_uploads',resource_type:'auto',public_id:(file.originalname||'upload').replace(/\.[^/.]+$/,'')})});const upload=multer({storage});
function requireAuth(req,res,next){if(req.session&&req.session.auth)return next();return res.status(401).json({success:false})}
app.post(['/api/admin/login','/admin-login'],(req,res)=>{const{password}=req.body||{};if(password===ADMIN_PASS){req.session.auth=true;return res.json({success:true})}return res.status(401).json({success:false})});
app.post('/api/logout',(req,res)=>{req.session.destroy(()=>res.json({success:true}))});app.get('/api/me',(req,res)=>res.json({loggedIn:!!(req.session&&req.session.auth)}));
app.get('/api/items',(req,res)=>{const d=readData();d.items.sort((a,b)=>(a.order??0)-(b.order??0));res.json({items:d.items})});
app.post(['/upload','/api/upload'],requireAuth,upload.any(),(req,res)=>{try{let m=null,d=null;(req.files||[]).forEach(f=>{const u=f.path||f.secure_url||null;if(['mainImage','main'].includes(f.fieldname))m=u;if(['detailImage','detail'].includes(f.fieldname))d=u});const name=(req.body&&(req.body.name||req.body.title))||'';const data=readData();const id=Date.now().toString();const order=(data.items.length?Math.max(...data.items.map(i=>i.order||0))+1:1);const item={id,name,mainUrl:m,detailUrl:d,order,createdAt:new Date().toISOString()};data.items.push(item);writeData(data);res.json({success:true,item})}catch(e){res.status(500).json({success:false})}});
app.post('/api/reorder',requireAuth,(req,res)=>{try{const{ids}=req.body||{};if(!Array.isArray(ids))return res.status(400).json({success:false});const d=readData();d.items.forEach(i=>{const idx=ids.indexOf(i.id);if(idx!=-1)i.order=idx+1});writeData(d);res.json({success:true})}catch(e){res.status(500).json({success:false})}});
app.delete('/api/item/:id',requireAuth,(req,res)=>{const{id}=req.params;const d=readData();const b=d.items.length;d.items=d.items.filter(i=>i.id!==id);writeData(d);res.json({success:b!==d.items.length})});
app.listen(PORT,()=>console.log('âœ… Server running on port '+PORT));
